{"ast":null,"code":"import html2canvas from 'html2canvas';\nexport const exportToPNG = async (elementId, filename = 'ranking.png') => {\n  const element = document.getElementById(elementId);\n  if (!element) {\n    console.error('Element not found:', elementId);\n    return;\n  }\n  try {\n    // Calcula a largura real do elemento (incluindo scroll)\n    const scrollWidth = element.scrollWidth;\n    const scrollHeight = element.scrollHeight;\n\n    // Ajusta scale baseado no tamanho do elemento\n    let scale = 2;\n    if (scrollWidth > 2000) {\n      scale = 1.5; // Reduz scale para elementos muito largos\n    }\n    if (scrollWidth > 3000) {\n      scale = 1.2; // Reduz ainda mais para elementos extremamente largos\n    }\n    const canvas = await html2canvas(element, {\n      scale: scale,\n      backgroundColor: '#ffffff',\n      logging: false,\n      useCORS: true,\n      width: scrollWidth,\n      height: scrollHeight,\n      windowWidth: scrollWidth,\n      windowHeight: scrollHeight,\n      scrollX: 0,\n      scrollY: 0\n    });\n    const link = document.createElement('a');\n    link.download = filename;\n    link.href = canvas.toDataURL('image/png');\n    link.click();\n  } catch (error) {\n    console.error('Error exporting to PNG:', error);\n  }\n};\nexport const exportAllRedes = async (redesList, elementPrefix = 'ranking-rede-') => {\n  for (const rede of redesList) {\n    const elementId = `${elementPrefix}${rede.replace(/\\s+/g, '-')}`;\n    await exportToPNG(elementId, `ranking-${rede}.png`);\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n};\nexport const exportBackup = (data, filename = 'backup-desafios.json') => {\n  const dataStr = JSON.stringify(data, null, 2);\n  const blob = new Blob([dataStr], {\n    type: 'application/json'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.download = filename;\n  link.href = url;\n  link.click();\n  URL.revokeObjectURL(url);\n};\nexport const importBackup = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = JSON.parse(e.target.result);\n        resolve(data);\n      } catch (error) {\n        reject(new Error('Invalid JSON file'));\n      }\n    };\n    reader.onerror = () => reject(new Error('Error reading file'));\n    reader.readAsText(file);\n  });\n};\nexport const THEME_VARIANTS = [{\n  name: 'Clássico BB',\n  headerBg: 'linear-gradient(135deg, #003399 0%, #2a56c6 100%)',\n  headerColor: 'white',\n  accentColor: '#ffcc00'\n}, {\n  name: 'Moderno',\n  headerBg: 'linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%)',\n  headerColor: 'white',\n  accentColor: '#fbbf24'\n}, {\n  name: 'Elegante',\n  headerBg: 'linear-gradient(135deg, #1f2937 0%, #374151 100%)',\n  headerColor: 'white',\n  accentColor: '#10b981'\n}, {\n  name: 'Vibrante',\n  headerBg: 'linear-gradient(135deg, #7c3aed 0%, #a78bfa 100%)',\n  headerColor: 'white',\n  accentColor: '#fbbf24'\n}, {\n  name: 'Ocean',\n  headerBg: 'linear-gradient(135deg, #0891b2 0%, #06b6d4 100%)',\n  headerColor: 'white',\n  accentColor: '#fbbf24'\n}, {\n  name: 'Sunset',\n  headerBg: 'linear-gradient(135deg, #dc2626 0%, #f97316 100%)',\n  headerColor: 'white',\n  accentColor: '#fef3c7'\n}, {\n  name: 'Forest',\n  headerBg: 'linear-gradient(135deg, #065f46 0%, #059669 100%)',\n  headerColor: 'white',\n  accentColor: '#fde68a'\n}, {\n  name: 'Royal',\n  headerBg: 'linear-gradient(135deg, #4c1d95 0%, #7c3aed 100%)',\n  headerColor: 'white',\n  accentColor: '#fcd34d'\n}, {\n  name: 'Corporate',\n  headerBg: 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)',\n  headerColor: 'white',\n  accentColor: '#38bdf8'\n}, {\n  name: 'Professional',\n  headerBg: 'linear-gradient(135deg, #1e40af 0%, #2563eb 100%)',\n  headerColor: 'white',\n  accentColor: '#fbbf24'\n}];","map":{"version":3,"names":["html2canvas","exportToPNG","elementId","filename","element","document","getElementById","console","error","scrollWidth","scrollHeight","scale","canvas","backgroundColor","logging","useCORS","width","height","windowWidth","windowHeight","scrollX","scrollY","link","createElement","download","href","toDataURL","click","exportAllRedes","redesList","elementPrefix","rede","replace","Promise","resolve","setTimeout","exportBackup","data","dataStr","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","revokeObjectURL","importBackup","file","reject","reader","FileReader","onload","e","parse","target","result","Error","onerror","readAsText","THEME_VARIANTS","name","headerBg","headerColor","accentColor"],"sources":["/app/frontend/src/utils/exportUtils.js"],"sourcesContent":["import html2canvas from 'html2canvas';\n\nexport const exportToPNG = async (elementId, filename = 'ranking.png') => {\n  const element = document.getElementById(elementId);\n  if (!element) {\n    console.error('Element not found:', elementId);\n    return;\n  }\n  \n  try {\n    // Calcula a largura real do elemento (incluindo scroll)\n    const scrollWidth = element.scrollWidth;\n    const scrollHeight = element.scrollHeight;\n    \n    // Ajusta scale baseado no tamanho do elemento\n    let scale = 2;\n    if (scrollWidth > 2000) {\n      scale = 1.5; // Reduz scale para elementos muito largos\n    }\n    if (scrollWidth > 3000) {\n      scale = 1.2; // Reduz ainda mais para elementos extremamente largos\n    }\n    \n    const canvas = await html2canvas(element, {\n      scale: scale,\n      backgroundColor: '#ffffff',\n      logging: false,\n      useCORS: true,\n      width: scrollWidth,\n      height: scrollHeight,\n      windowWidth: scrollWidth,\n      windowHeight: scrollHeight,\n      scrollX: 0,\n      scrollY: 0\n    });\n    \n    const link = document.createElement('a');\n    link.download = filename;\n    link.href = canvas.toDataURL('image/png');\n    link.click();\n  } catch (error) {\n    console.error('Error exporting to PNG:', error);\n  }\n};\n\nexport const exportAllRedes = async (redesList, elementPrefix = 'ranking-rede-') => {\n  for (const rede of redesList) {\n    const elementId = `${elementPrefix}${rede.replace(/\\s+/g, '-')}`;\n    await exportToPNG(elementId, `ranking-${rede}.png`);\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n};\n\nexport const exportBackup = (data, filename = 'backup-desafios.json') => {\n  const dataStr = JSON.stringify(data, null, 2);\n  const blob = new Blob([dataStr], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n  \n  const link = document.createElement('a');\n  link.download = filename;\n  link.href = url;\n  link.click();\n  \n  URL.revokeObjectURL(url);\n};\n\nexport const importBackup = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = JSON.parse(e.target.result);\n        resolve(data);\n      } catch (error) {\n        reject(new Error('Invalid JSON file'));\n      }\n    };\n    \n    reader.onerror = () => reject(new Error('Error reading file'));\n    reader.readAsText(file);\n  });\n};\n\nexport const THEME_VARIANTS = [\n  {\n    name: 'Clássico BB',\n    headerBg: 'linear-gradient(135deg, #003399 0%, #2a56c6 100%)',\n    headerColor: 'white',\n    accentColor: '#ffcc00'\n  },\n  {\n    name: 'Moderno',\n    headerBg: 'linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%)',\n    headerColor: 'white',\n    accentColor: '#fbbf24'\n  },\n  {\n    name: 'Elegante',\n    headerBg: 'linear-gradient(135deg, #1f2937 0%, #374151 100%)',\n    headerColor: 'white',\n    accentColor: '#10b981'\n  },\n  {\n    name: 'Vibrante',\n    headerBg: 'linear-gradient(135deg, #7c3aed 0%, #a78bfa 100%)',\n    headerColor: 'white',\n    accentColor: '#fbbf24'\n  },\n  {\n    name: 'Ocean',\n    headerBg: 'linear-gradient(135deg, #0891b2 0%, #06b6d4 100%)',\n    headerColor: 'white',\n    accentColor: '#fbbf24'\n  },\n  {\n    name: 'Sunset',\n    headerBg: 'linear-gradient(135deg, #dc2626 0%, #f97316 100%)',\n    headerColor: 'white',\n    accentColor: '#fef3c7'\n  },\n  {\n    name: 'Forest',\n    headerBg: 'linear-gradient(135deg, #065f46 0%, #059669 100%)',\n    headerColor: 'white',\n    accentColor: '#fde68a'\n  },\n  {\n    name: 'Royal',\n    headerBg: 'linear-gradient(135deg, #4c1d95 0%, #7c3aed 100%)',\n    headerColor: 'white',\n    accentColor: '#fcd34d'\n  },\n  {\n    name: 'Corporate',\n    headerBg: 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)',\n    headerColor: 'white',\n    accentColor: '#38bdf8'\n  },\n  {\n    name: 'Professional',\n    headerBg: 'linear-gradient(135deg, #1e40af 0%, #2563eb 100%)',\n    headerColor: 'white',\n    accentColor: '#fbbf24'\n  }\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}