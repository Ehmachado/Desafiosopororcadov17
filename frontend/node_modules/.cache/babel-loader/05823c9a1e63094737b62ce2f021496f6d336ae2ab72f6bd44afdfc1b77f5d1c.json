{"ast":null,"code":"import { parseNumericValue } from './dataParser';\nexport const calculateOrcadoPorAgencia = (prefixo, carteiras, orcadosPorTipo, orcadosPorCarteira, useCarteiraBase) => {\n  if (!prefixo) return 0;\n  if (useCarteiraBase && orcadosPorCarteira && orcadosPorCarteira.length > 0) {\n    const orcados = orcadosPorCarteira.filter(o => o.prefixo === prefixo);\n    return orcados.reduce((sum, o) => {\n      const valor = parseNumericValue(o.valor);\n      const fatorMeta = parseNumericValue(o.fatorMeta || 100) / 100;\n      return sum + valor * fatorMeta;\n    }, 0);\n  }\n  const carteirasAgencia = carteiras.filter(c => c.prefixo === prefixo);\n\n  // Contar quantas carteiras de cada tipo\n  const tiposCount = {};\n  carteirasAgencia.forEach(cart => {\n    const tipo = cart.tipoCarteira;\n    if (tipo) {\n      tiposCount[tipo] = (tiposCount[tipo] || 0) + 1;\n    }\n  });\n  let totalOrcado = 0;\n  Object.entries(tiposCount).forEach(([tipo, qtd]) => {\n    // Soma todos os produtos desse tipo\n    const orcadosTipo = orcadosPorTipo.filter(o => o.tipoCarteira === tipo);\n    const somaOrcados = orcadosTipo.reduce((sum, o) => sum + parseNumericValue(o.valor), 0);\n    totalOrcado += somaOrcados * qtd;\n  });\n  return totalOrcado;\n};\nexport const calculateRealizadoPorAgencia = (prefixo, produto, realizadosPorTipo, diaAtual) => {\n  if (!prefixo || !produto) return 0;\n  let realizados = realizadosPorTipo.filter(r => r.prefixo === prefixo);\n  if (diaAtual) {\n    realizados = realizados.filter(r => !r.dia || r.dia <= diaAtual);\n  }\n  if (produto === 'Vida Total') {\n    const vida = realizados.filter(r => r.produto === 'Vida').reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n    const vidinha = realizados.filter(r => r.produto === 'Vidinha').reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n    return vida + vidinha;\n  }\n  return realizados.filter(r => r.produto === produto).reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n};\nexport const calculateRealizadoPorCarteira = (prefixo, carteira, realizadosPorCarteira, diaAtual) => {\n  if (!prefixo || !carteira) return 0;\n  let realizados = realizadosPorCarteira.filter(r => r.prefixo === prefixo && r.carteira === carteira);\n  if (diaAtual) {\n    realizados = realizados.filter(r => !r.dia || r.dia <= diaAtual);\n  }\n  return realizados.reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n};\nexport const calculateAtingimento = (realizado, orcado) => {\n  if (!orcado || orcado === 0) return 0;\n  return parseNumericValue(realizado) / parseNumericValue(orcado) * 100;\n};\nexport const getAtingimentoColor = percentage => {\n  if (percentage >= 90) return '#28a745'; // Green\n  if (percentage >= 60) return '#ffc107'; // Yellow\n  return '#dc3545'; // Red\n};\nexport const getAtingimentoClass = percentage => {\n  if (percentage >= 90) return 'status-excellent';\n  if (percentage >= 60) return 'status-warning';\n  return 'status-danger';\n};\nexport const calculatePotencialPorTipo = (tipoCarteira, carteiras, orcadosPorTipo) => {\n  const numCarteiras = carteiras.filter(c => c.tipoCarteira === tipoCarteira).length;\n  const somaOrcados = orcadosPorTipo.filter(o => o.tipoCarteira === tipoCarteira).reduce((sum, o) => sum + parseNumericValue(o.valor), 0);\n  return numCarteiras * somaOrcados;\n};\nexport const calculatePotencialTotal = (carteiras, orcadosPorTipo) => {\n  const tiposUnicos = [...new Set(carteiras.map(c => c.tipoCarteira))];\n  return tiposUnicos.reduce((total, tipo) => {\n    return total + calculatePotencialPorTipo(tipo, carteiras, orcadosPorTipo);\n  }, 0);\n};\nexport const groupByRede = (data, redes) => {\n  const grouped = {};\n  data.forEach(item => {\n    const redeInfo = redes.find(r => r.prefixo === item.prefixo);\n    const rede = (redeInfo === null || redeInfo === void 0 ? void 0 : redeInfo.rede) || 'Sem Rede';\n    if (!grouped[rede]) {\n      grouped[rede] = [];\n    }\n    grouped[rede].push(item);\n  });\n  return grouped;\n};\nexport const sortByScoreMedio = rankings => {\n  return [...rankings].sort((a, b) => {\n    const scoreA = a.atingimentos ? Object.values(a.atingimentos).reduce((sum, val) => sum + val, 0) / Object.values(a.atingimentos).length : 0;\n    const scoreB = b.atingimentos ? Object.values(b.atingimentos).reduce((sum, val) => sum + val, 0) / Object.values(b.atingimentos).length : 0;\n    return scoreB - scoreA;\n  });\n};","map":{"version":3,"names":["parseNumericValue","calculateOrcadoPorAgencia","prefixo","carteiras","orcadosPorTipo","orcadosPorCarteira","useCarteiraBase","length","orcados","filter","o","reduce","sum","valor","fatorMeta","carteirasAgencia","c","tiposCount","forEach","cart","tipo","tipoCarteira","totalOrcado","Object","entries","qtd","orcadosTipo","somaOrcados","calculateRealizadoPorAgencia","produto","realizadosPorTipo","diaAtual","realizados","r","dia","vida","vidinha","calculateRealizadoPorCarteira","carteira","realizadosPorCarteira","calculateAtingimento","realizado","orcado","getAtingimentoColor","percentage","getAtingimentoClass","calculatePotencialPorTipo","numCarteiras","calculatePotencialTotal","tiposUnicos","Set","map","total","groupByRede","data","redes","grouped","item","redeInfo","find","rede","push","sortByScoreMedio","rankings","sort","a","b","scoreA","atingimentos","values","val","scoreB"],"sources":["/app/frontend/src/utils/calculations.js"],"sourcesContent":["import { parseNumericValue } from './dataParser';\n\nexport const calculateOrcadoPorAgencia = (prefixo, carteiras, orcadosPorTipo, orcadosPorCarteira, useCarteiraBase) => {\n  if (!prefixo) return 0;\n  \n  if (useCarteiraBase && orcadosPorCarteira && orcadosPorCarteira.length > 0) {\n    const orcados = orcadosPorCarteira.filter(o => o.prefixo === prefixo);\n    return orcados.reduce((sum, o) => {\n      const valor = parseNumericValue(o.valor);\n      const fatorMeta = parseNumericValue(o.fatorMeta || 100) / 100;\n      return sum + (valor * fatorMeta);\n    }, 0);\n  }\n  \n  const carteirasAgencia = carteiras.filter(c => c.prefixo === prefixo);\n  \n  // Contar quantas carteiras de cada tipo\n  const tiposCount = {};\n  carteirasAgencia.forEach(cart => {\n    const tipo = cart.tipoCarteira;\n    if (tipo) {\n      tiposCount[tipo] = (tiposCount[tipo] || 0) + 1;\n    }\n  });\n  \n  let totalOrcado = 0;\n  Object.entries(tiposCount).forEach(([tipo, qtd]) => {\n    // Soma todos os produtos desse tipo\n    const orcadosTipo = orcadosPorTipo.filter(o => o.tipoCarteira === tipo);\n    const somaOrcados = orcadosTipo.reduce((sum, o) => sum + parseNumericValue(o.valor), 0);\n    totalOrcado += somaOrcados * qtd;\n  });\n  \n  return totalOrcado;\n};\n\nexport const calculateRealizadoPorAgencia = (prefixo, produto, realizadosPorTipo, diaAtual) => {\n  if (!prefixo || !produto) return 0;\n  \n  let realizados = realizadosPorTipo.filter(r => r.prefixo === prefixo);\n  \n  if (diaAtual) {\n    realizados = realizados.filter(r => !r.dia || r.dia <= diaAtual);\n  }\n  \n  if (produto === 'Vida Total') {\n    const vida = realizados\n      .filter(r => r.produto === 'Vida')\n      .reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n    const vidinha = realizados\n      .filter(r => r.produto === 'Vidinha')\n      .reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n    return vida + vidinha;\n  }\n  \n  return realizados\n    .filter(r => r.produto === produto)\n    .reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n};\n\nexport const calculateRealizadoPorCarteira = (prefixo, carteira, realizadosPorCarteira, diaAtual) => {\n  if (!prefixo || !carteira) return 0;\n  \n  let realizados = realizadosPorCarteira.filter(r => \n    r.prefixo === prefixo && r.carteira === carteira\n  );\n  \n  if (diaAtual) {\n    realizados = realizados.filter(r => !r.dia || r.dia <= diaAtual);\n  }\n  \n  return realizados.reduce((sum, r) => sum + parseNumericValue(r.valor), 0);\n};\n\nexport const calculateAtingimento = (realizado, orcado) => {\n  if (!orcado || orcado === 0) return 0;\n  return (parseNumericValue(realizado) / parseNumericValue(orcado)) * 100;\n};\n\nexport const getAtingimentoColor = (percentage) => {\n  if (percentage >= 90) return '#28a745'; // Green\n  if (percentage >= 60) return '#ffc107'; // Yellow\n  return '#dc3545'; // Red\n};\n\nexport const getAtingimentoClass = (percentage) => {\n  if (percentage >= 90) return 'status-excellent';\n  if (percentage >= 60) return 'status-warning';\n  return 'status-danger';\n};\n\nexport const calculatePotencialPorTipo = (tipoCarteira, carteiras, orcadosPorTipo) => {\n  const numCarteiras = carteiras.filter(c => c.tipoCarteira === tipoCarteira).length;\n  const somaOrcados = orcadosPorTipo\n    .filter(o => o.tipoCarteira === tipoCarteira)\n    .reduce((sum, o) => sum + parseNumericValue(o.valor), 0);\n  \n  return numCarteiras * somaOrcados;\n};\n\nexport const calculatePotencialTotal = (carteiras, orcadosPorTipo) => {\n  const tiposUnicos = [...new Set(carteiras.map(c => c.tipoCarteira))];\n  \n  return tiposUnicos.reduce((total, tipo) => {\n    return total + calculatePotencialPorTipo(tipo, carteiras, orcadosPorTipo);\n  }, 0);\n};\n\nexport const groupByRede = (data, redes) => {\n  const grouped = {};\n  \n  data.forEach(item => {\n    const redeInfo = redes.find(r => r.prefixo === item.prefixo);\n    const rede = redeInfo?.rede || 'Sem Rede';\n    \n    if (!grouped[rede]) {\n      grouped[rede] = [];\n    }\n    grouped[rede].push(item);\n  });\n  \n  return grouped;\n};\n\nexport const sortByScoreMedio = (rankings) => {\n  return [...rankings].sort((a, b) => {\n    const scoreA = a.atingimentos ? \n      Object.values(a.atingimentos).reduce((sum, val) => sum + val, 0) / Object.values(a.atingimentos).length : 0;\n    const scoreB = b.atingimentos ? \n      Object.values(b.atingimentos).reduce((sum, val) => sum + val, 0) / Object.values(b.atingimentos).length : 0;\n    \n    return scoreB - scoreA;\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}